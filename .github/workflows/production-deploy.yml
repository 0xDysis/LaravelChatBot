name: Production deployment
on:
  workflow_dispatch:
  push:
    tags:
      - v*

env:
  PHP_VERSION: 8.2
  REMOTE_BASE_PATH: ~/
  DEPLOY_CACHE: deploy_cache
  DEPLOY_TEMP: deploy_temp
  DEPLOY_FOLDER: public_html
  BACKUP_FOLDER: public_html_backup

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📄 Clone repository
        uses: actions/checkout@v3

      - name: ⚙️ Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PRODUCTION_KEY }}
          known_hosts: ${{ secrets.PRODUCTION_KNOWN_HOSTS }}

      - name: ⚙️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: ⬇️ Install npm dependencies
        run: npm ci

      - name: 🔧 Build npm
        run: npm run build

      - name: 📦 Remove node_modules
        run: rm -r node_modules

      - name: ⚙️ Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 🔑Configure Composer authentication
        run: |
          composer config github-oauth.github.com ${{ secrets.TOKEN_GITHUB }}

      - name: ✨ Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: 📦 Set up Composer dependency caching
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: ⬇️ Install Composer dependencies
        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress --no-dev --no-ansi --no-interaction --optimize-autoloader

      - name: 📂 Deploy
        run: rsync -avz -e "ssh" --delete --include-from=.rsync . ${{ secrets.PRODUCTION_USER_NAME }}@${{ secrets.PRODUCTION_HOST }}:${{ env.REMOTE_BASE_PATH }}${{ env.DEPLOY_CACHE }}/

      - name: 📂 Create folders
        run: |
          ssh ${{ secrets.PRODUCTION_USER_NAME }}@${{ secrets.PRODUCTION_HOST }} << EOF
            cd ${{ env.REMOTE_BASE_PATH }}
            mkdir -p shared/storage/app
            mkdir -p shared/storage/logs
            mkdir -p shared/storage/framework/cache
            mkdir -p shared/storage/framework/logs
            mkdir -p shared/storage/framework/sessions
            mkdir -p shared/storage/framework/statamic
            mkdir -p shared/storage/framework/testing
            mkdir -p shared/storage/framework/views
          EOF

      - name: 🔗 Create symlinks
        run: |
          ssh ${{ secrets.PRODUCTION_USER_NAME }}@${{ secrets.PRODUCTION_HOST }} << EOF
            cd ${{ env.REMOTE_BASE_PATH }}
          
            cp -dR ${{ env.DEPLOY_CACHE }} ${{ env.DEPLOY_TEMP }};
          
            echo "Creating symlinks for persistent files/folders"
            rm -f ${{ env.DEPLOY_TEMP }}/.env && ln -sr shared/.env ${{ env.DEPLOY_TEMP }}/
            rm -rf ${{ env.DEPLOY_TEMP }}/storage && ln -sr shared/storage ${{ env.DEPLOY_TEMP }}/
          
            echo "Switching ${{ env.DEPLOY_CACHE }} to ${{ env.DEPLOY_FOLDER }}"
            rm -rf ${{ env.BACKUP_FOLDER }}
            mv ${{ env.DEPLOY_FOLDER }} ${{ env.BACKUP_FOLDER }}
            mv ${{ env.DEPLOY_TEMP }} ${{ env.DEPLOY_FOLDER }}
          EOF
      - name: ⚙️ Run post-deployment scripts
        run: |
          ssh ${{ secrets.PRODUCTION_USER_NAME }}@${{ secrets.PRODUCTION_HOST }} << EOF
            cd ${{ env.REMOTE_BASE_PATH }}${{ env.DEPLOY_FOLDER }}
            php8.2 artisan storage:link --force
            php8.2 artisan config:cache
            php8.2 artisan event:cache
            php8.2 artisan route:cache
            php8.2 artisan view:cache
            php8.2 artisan migrate --force
          
            echo "Reloading php-fpm"
            sudo systemctl reload php-fpm-${{ secrets.PRODUCTION_USER_NAME }}.service
          EOF
